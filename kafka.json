
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches a Kafka cluster that leverages Exhibitor to find zookeeper instances.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m3.large",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "KeyName" : {
      "Description" : "Existing EC2 KeyPair to be associated with all cluster instances for SSH access. For default AMIs, log in as the 'ubuntu' user.",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "ClusterSize" : {
      "Description" : "Number of nodes to launch",
      "Type" : "Number",
      "Default": 2
    },
    "DockerImage" : {
      "Description" : "Path of the Kafka Docker image (format: '[<registry>[:<port>]/]<repository>:<version>')",
      "Type" : "String",
      "Default" : "wurstmeister/kafka:latest"
    },

    "Subnets" : {
      "Description" : "List of VPC subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "AWS::EC2::VPC::Id"
    },
    "AdminSecurityGroup" : {
      "Description" : "Existing security group that should be granted administrative access to ZooKeeper (e.g., 'sg-123456')",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "ZookeeperClientSecurityGroup" : {
      "Description" : "Existing security group that grants zookeeper-access",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "AvailabilityZones": {
      "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match up with the passed Subnets.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    },
    "KafkaChroot": {
      "Description": "The chroot (starting with /) for Kafka to use within zookeeper",
      "Type": "String",
      "Default": "/kafka"
    },
    "ExhibitorLoadBalancer": {
      "Description": "Exhibitor load balancer DNS Name, in the form of http(s)://some-load.balancer.elb.amazonaws.com (no trailing slash).",
      "Type": "String"
    },
    "ManagerDockerImage": {
        "Type": "String",
        "Description": "Docker image running kafka manager.",
        "Default": "sheepkiller/kafka-manager"
    },
    "ManagerClusterSize" : {
      "Description" : "Number of kafka manager nodes to launch",
      "Type" : "Number",
      "Default": 1
    },
    "ManagerInstanceType" : {
      "Description" : "Kafka Manager EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "RegistratorDockerImage": {
      "Description" : "Docker image to use for registrator",
      "Type" : "String",
      "Default" : "gliderlabs/registrator:v7"
    },
    "ConsulDockerImage": {
      "Description" : "Docker image to use for consul agent",
      "Type" : "String",
      "Default" : "consul:v0.6.4"
    },
    "ConsulServer": {
      "Description" : "Consul server address to connect agent to",
      "Type" : "String"
    },
    "ServiceName": {
      "Description" : "Service name in consul",
      "Type" : "String",
      "Default" : "kafka2"
    },
    "SysdigAgentContainer": {
      "Description" : "Sysdig cloud agent docker container name",
      "Type" : "String",
      "Default" : "sysdig/agent"
    },
    "SysdigAgentAccessKey": {
      "Description" : "Sysdig cloud agent access key",
      "Type" : "String"
    },
    "Environment": {
      "Description" : "Environment for stack",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-96163afe"
      },
      "us-west-1" : {
        "AMI" : "ami-117c9a55"
      },
      "us-west-2" : {
        "AMI" : "ami-8d123ebd"
      },
      "eu-west-1" : {
        "AMI" : "ami-8be47afc"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-64b88936"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-abf48491"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-3d62953d"
      },
      "sa-east-1" : {
        "AMI" : "ami-db1fa7c6"
      }
    }
  },

  "Conditions" : {
    "UseAllAvailabilityZones" : {"Fn::Equals" : [{ "Fn::Join" : ["", {"Ref" : "AvailabilityZones"} ]}, ""]}
  },

  "Resources" : {
    "ManagerServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs": "AWS::Region" },
            { "Ref" : "AvailabilityZones" }
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "KafkaManagerLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "DesiredCapacity" : {"Ref": "ManagerClusterSize"},
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "kafka-manager",
            "PropagateAtLaunch" : "true"
          },
          {
            "Key": "Name",
            "Value" : "Kafka Manager",
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs": "AWS::Region" },
            { "Ref" : "AvailabilityZones" }
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "KafkaLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "9",
        "DesiredCapacity" : { "Ref" : "ClusterSize" },
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "kafka",
            "PropagateAtLaunch" : "true"
          },
          {
            "Key": "Name",
            "Value" : "Kafka",
            "PropagateAtLaunch" : "true"
          }
        ],
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "2",
          "PauseTime": "PT20M",
          "WaitOnResourceSignals": true
        }
      }
    },

    "KafkaLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
        "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }, { "Ref" : "ZookeeperClientSecurityGroup" } ],
        "AssociatePublicIpAddress": "true",
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Upgrade docker\n",
          "export DEBIAN_FRONTEND=noninteractive\n",
          "sudo -E apt-get update\n",
          "sudo -E apt-get upgrade -y lxc-docker\n",

          "curl -s http://stedolan.github.io/jq/download/linux64/jq > jq\n",
          "chmod +x jq\n",

          "# Set up kafka connection using exhibitor data\n",
          "export EX_DATA=`curl -s ", {"Ref": "ExhibitorLoadBalancer"}, "`\n",
          "export ZK_PORT=`echo $EX_DATA | ./jq -r '.port'`\n",
          "export ZK_HOSTS=`echo $EX_DATA | ./jq -r '.servers | join(\",\")'`:$ZK_PORT\n",
          "export ZK_CONNECT=$ZK_HOSTS", {"Ref": "KafkaChroot"} , "\n",
          "export IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",

          "# Set up and start the Kafka service\n",
          "sudo docker pull ", { "Ref": "DockerImage" }, "\n",
          "runit-service create kafka docker run -p 9092:9092",
          " -e SERVICE_NAME=", { "Ref" : "ServiceName" },
          " -e KAFKA_BROKER_ID=${IP##*.}",
          " -e KAFKA_ADVERTISED_PORT=9092",
          " -e KAFKA_ZOOKEEPER_CONNECT=$ZK_CONNECT",
          " -e \"KAFKA_ADVERTISED_HOST_NAME=`ec2metadata --local-hostname`\"",
          " ", { "Ref": "DockerImage" }, "\n",
          "runit-service enable kafka\n",

          "# Set up and start the Consul Agent\n",
          "sudo docker pull ", { "Ref": "ConsulDockerImage" }, "\n",
          "runit-service create consul docker run ",
          "   -p 8300:8300",
          "   -p 8301:8301",
          "   -p 8301:8301/udp",
          "   -p 8302:8302",
          "   -p 8302:8302/udp",
          "   -p 8400:8400",
          "   -p 8500:8500",
          "   ", { "Ref": "ConsulDockerImage" },
          "   agent -join=", { "Ref" : "ConsulServer" }, " -advertise=`hostname -i` -dc=", { "Ref" : "AWS::Region" }, " -client=0.0.0.0\n",
          "runit-service enable consul\n",

          "# Set up and start the Registrator\n",
          "sudo docker pull ", { "Ref": "RegistratorDockerImage" }, "\n",
          "runit-service create registrator docker run ",
          "   --net=host",
          "   --volume=/var/run/docker.sock:/tmp/docker.sock",
          "   ", { "Ref": "RegistratorDockerImage" },
          "   consul://localhost:8500\n",
          "runit-service enable registrator\n",

          "# Setup Sysdig cloud agent\n",
          "sudo docker pull ", { "Ref": "SysdigAgentContainer" }, "\n",
          "runit-service create sysdigcloudagent docker run ",
          "   --net=host",
          "   --name=sysdigagent",
          "   --privileged",
          "   --pid host",
          "   -e ACCESS_KEY=", { "Ref" : "SysdigAgentAccessKey" },
          "   -e TAGS=environment:", { "Ref" : "Environment" }, ",Name:kafka",
          "   --volume=/var/run/docker.sock:/host/var/run/docker.sock",
          "   --volume=/dev:/host/dev",
          "   --volume=/proc:/host/proc:ro",
          "   --volume=/boot:/host/boot:ro",
          "   --volume=/lib/modules:/host/lib/modules:ro",
          "   --volume=/usr:/host/usr:ro",
          "   ", { "Ref": "SysdigAgentContainer" }, "\n",
          "runit-service enable sysdigcloudagent\n",

          "# All is well so signal success\n",
          "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

          "#EOF"
        ]]}}
      }
    },

    "KafkaManagerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
          "KeyName" : { "Ref" : "KeyName" },
          "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI"] },
          "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }, { "Ref" : "ZookeeperClientSecurityGroup" } ],
          "AssociatePublicIpAddress": "true",
          "InstanceType" : {"Ref": "ManagerInstanceType"},
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -ex\n",

            "# Helper function\n",
            "function error_exit\n",
            "{\n",
            "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
            "  exit 1\n",
            "}\n",

            "# Upgrade docker\n",
            "export DEBIAN_FRONTEND=noninteractive\n",
            "sudo -E apt-get update\n",
            "sudo -E apt-get upgrade -y lxc-docker\n",

            "curl -s http://stedolan.github.io/jq/download/linux64/jq > jq\n",
            "chmod +x jq\n",

            "# Set up kafka connection using exhibitor data\n",
            "export EX_DATA=`curl -s ", {"Ref": "ExhibitorLoadBalancer"}, "`\n",
            "export ZK_PORT=`echo $EX_DATA | ./jq '.port'`\n",
            "export ZK_HOSTS=`echo $EX_DATA | ./jq '.servers | join(\",\")'`:$ZK_PORT\n",
            "export ZK_CONNECT=$ZK_HOSTS", {"Ref": "KafkaChroot"} , "\n",

            "# Set up and start the Kafka Manager service\n",
            "sudo docker pull ", { "Ref": "DockerImage" }, "\n",
            "runit-service create kafkamanager docker run -p 9000:9000",
            " -e KAFKA_ZOOKEEPER_CONNECT=$ZK_CONNECT",
            " -e ZK_HOSTS=$ZK_CONNECT",
            " ", { "Ref": "ManagerDockerImage" }, "\n",
            "runit-service enable kafkamanager\n",

            "# All is well so signal success\n",
            "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

            "#EOF"
          ]]}}
      }
    },

    "ClientSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "For ZooKeeper clients. Grants access to the associated ZooKeeper cluster.",
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "ServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Kafka and zookeeper access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
            { "IpProtocol" : "tcp", "FromPort" : "2181", "ToPort" : "2181", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} },
            { "IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} }]
      }
    },

    "LbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Exhibitor access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} } ]
      }
    },

    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "ServerSecurityGroup" },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": { "Ref": "ServerSecurityGroup" }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    }
  },
  "Outputs" : {

  }
}
