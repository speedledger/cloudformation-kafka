
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches a Kafka cluster that leverages Exhibitor to find zookeeper instances.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "AllowedValues" : [
        "t2.micro", "t2.small", "t2.medium",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "hs1.8xlarge", "g2.2xlarge"
      ],
      "ConstraintDescription" : "must be a valid, HVM-compatible EC2 instance type."
    },
    "KeyName" : {
      "Description" : "Existing EC2 KeyPair to be associated with all cluster instances for SSH access. For default AMIs, log in as the 'ubuntu' user.",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "ClusterSize" : {
      "Description" : "Number of nodes to launch",
      "Type" : "Number",
      "Default": 3
    },
    "DockerImage" : {
      "Description" : "Path of the Kafka Docker image (format: '[<registry>[:<port>]/]<repository>:<version>')",
      "Type" : "String",
      "Default" : "wurstmeister/kafka:0.10.0.1"
    },

    "Subnets" : {
      "Description" : "List of VPC subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "AWS::EC2::VPC::Id"
    },
    "AdminSecurityGroup" : {
      "Description" : "Existing security group that should be granted administrative access to ZooKeeper (e.g., 'sg-123456')",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "ZookeeperClientSecurityGroup" : {
      "Description" : "Existing security group that grants zookeeper-access",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "AvailabilityZones": {
      "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match up with the passed Subnets.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    },
    "ServiceName": {
      "Description" : "Service name in consul",
      "Type" : "String",
      "Default" : "kafka"
    },
    "SysdigAgentContainer": {
      "Description" : "Sysdig cloud agent docker container name",
      "Type" : "String",
      "Default" : "sysdig/agent"
    },
    "SysdigAgentAccessKey": {
      "Description" : "Sysdig cloud agent access key",
      "Type" : "String"
    },
    "Environment": {
      "Description" : "Environment for stack",
      "Type" : "String"
    },
    "AmiId": {
      "Description" : "Ami ID to use for server instances",
      "Type" : "String"
    },
    "KafkaDefaultTopicReplicationFactor": {
      "Description" : "Default topic replication factory",
      "Type" : "Number",
      "Default" : 2
    },
    "EbsVolumeSize": {
      "Description" : "Default volume size for instance",
      "Type" : "Number",
      "Default" : 80
    }
  },

  "Conditions" : {
    "UseAllAvailabilityZones" : {"Fn::Equals" : [{ "Fn::Join" : ["", {"Ref" : "AvailabilityZones"} ]}, ""]}
  },

  "Resources" : {
    "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs": "AWS::Region" },
            { "Ref" : "AvailabilityZones" }
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "KafkaLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "9",
        "DesiredCapacity" : { "Ref" : "ClusterSize" },
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "kafka",
            "PropagateAtLaunch" : "true"
          },
          {
            "Key": "Name",
            "Value" : "Kafka",
            "PropagateAtLaunch" : "true"
          },
          {
            "Key" : "Stack",
            "Value" : { "Ref" : "Environment" },
            "PropagateAtLaunch" : "true"
          }
        ],
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "2",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": true
        }
      }
    },

    "KafkaLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroups" : [ { "Ref" : "ServerSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }, { "Ref" : "ZookeeperClientSecurityGroup" } ],
        "AssociatePublicIpAddress": "true",
        "InstanceType" : { "Ref" : "InstanceType" },
        "EbsOptimized": true,
        "BlockDeviceMappings" : [ {
          "DeviceName" : "/dev/sda1",
          "Ebs" : {
            "VolumeType" : "gp2",
            "VolumeSize" : { "Ref" : "EbsVolumeSize" },
          }
        }],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "export IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",

          "# Set up and start the Kafka service\n",
          "sudo docker pull ", { "Ref": "DockerImage" }, "\n",
          "runit-service create kafka docker run -p 9092:9092",
          " --name kafka",
          " -e SERVICE_NAME=", { "Ref" : "ServiceName" },
          " -e KAFKA_BROKER_ID=${IP##*.}",
          " -e KAFKA_ADVERTISED_PORT=9092",
          " -e KAFKA_ZOOKEEPER_CONNECT=zookeeper.service.internal:2181/kafka",
          " -e KAFKA_ADVERTISED_HOST_NAME=${IP}",
          " -e KAFKA_DEFAULT_REPLICATION_FACTOR=", { "Ref" : "KafkaDefaultTopicReplicationFactor" },
          " ", { "Ref": "DockerImage" }, "\n",
          "runit-service enable kafka\n",

          "# All is well so signal success\n",
          "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

          "cfn-signal -e 0 --region ", {"Ref": "AWS::Region"}, " --stack ", {"Ref": "AWS::StackName"}, " --resource ServerGroup", "\n",

          "#EOF"
        ]]}}
      }
    },

    "ClientSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "For ZooKeeper clients. Grants access to the associated ZooKeeper cluster.",
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "ServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Kafka and zookeeper access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
            { "IpProtocol" : "tcp", "FromPort" : "2181", "ToPort" : "2181", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} },
            { "IpProtocol" : "tcp", "FromPort" : "9092", "ToPort" : "9092", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} }]
      }
    },

    "LbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Exhibitor access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" :
          [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} } ]
      }
    },

    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "ServerSecurityGroup" },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": { "Ref": "ServerSecurityGroup" }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    }
  },
  "Outputs" : {

  }
}
